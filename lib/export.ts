import jsPDF from 'jspdf'
import { format } from 'date-fns'
import { formatCurrency, formatPercent, formatMonths, formatFTE } from './format'
import { generateExecutiveSummary, generateRecommendations } from './report'
import type { RoiCalculatorFormData } from './schemas'
import type { CalculationResults } from './calcs'

export function exportToPDF(data: RoiCalculatorFormData, results: CalculationResults) {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.width
  const pageHeight = doc.internal.pageSize.height
  const margin = 25
  const contentWidth = pageWidth - 2 * margin
  let yPos = margin

  // Define Asuno brand colors (RGB values for jsPDF)
  const asunoBlue = [0, 128, 255] // #0080FF
  const darkGray = [51, 51, 51]   // #333
  const lightGray = [128, 128, 128] // #808080
  const successGreen = [34, 197, 94] // #22C55E
  const warningOrange = [245, 158, 11] // #F59E0B
  const errorRed = [239, 68, 68] // #EF4444

  const addHeader = () => {
    // Header background
    doc.setFillColor(...asunoBlue)
    doc.rect(0, 0, pageWidth, 40, 'F')

    // Logo placeholder (blue circle)
    doc.setFillColor(255, 255, 255)
    doc.circle(margin, 20, 8, 'F')
    doc.setFillColor(...asunoBlue)
    doc.circle(margin, 20, 6, 'F')

    // Header text
    doc.setTextColor(255, 255, 255)
    doc.setFont('helvetica', 'bold')
    doc.setFontSize(18)
    doc.text('ASUNO ROI CALCULATOR', margin + 20, 15)

    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.text('Automation Return on Investment Analysis', margin + 20, 25)

    yPos = 55
  }

  const addFooter = () => {
    const footerY = pageHeight - 15
    doc.setTextColor(...lightGray)
    doc.setFont('helvetica', 'normal')
    doc.setFontSize(8)
    doc.text(`Generated by Asuno ROI Calculator | ${format(new Date(), 'PPP')}`, margin, footerY)
    doc.text(`Page ${doc.getCurrentPageInfo().pageNumber}`, pageWidth - margin - 20, footerY)
  }

  const checkPageBreak = (requiredSpace: number = 30) => {
    if (yPos + requiredSpace > pageHeight - 40) {
      addFooter()
      doc.addPage()
      addHeader()
    }
  }

  const addSection = (title: string, content: () => void) => {
    checkPageBreak(50)

    // Section title with underline
    doc.setTextColor(...asunoBlue)
    doc.setFont('helvetica', 'bold')
    doc.setFontSize(14)
    doc.text(title, margin, yPos)

    // Underline
    const titleWidth = doc.getTextWidth(title)
    doc.setDrawColor(...asunoBlue)
    doc.setLineWidth(0.5)
    doc.line(margin, yPos + 2, margin + titleWidth, yPos + 2)

    yPos += 15
    doc.setTextColor(...darkGray)
    content()
    yPos += 10
  }

  const addKPICard = (title: string, value: string, color: number[] = darkGray, x: number, width: number) => {
    // Card background
    doc.setFillColor(248, 250, 252) // slate-50
    doc.setDrawColor(226, 232, 240) // slate-200
    doc.rect(x, yPos - 5, width, 25, 'FD')

    // Value
    doc.setTextColor(...color)
    doc.setFont('helvetica', 'bold')
    doc.setFontSize(16)
    const valueLines = doc.splitTextToSize(value, width - 10)
    doc.text(valueLines[0], x + 5, yPos + 5)

    // Title
    doc.setTextColor(...lightGray)
    doc.setFont('helvetica', 'normal')
    doc.setFontSize(9)
    const titleLines = doc.splitTextToSize(title, width - 10)
    doc.text(titleLines[0], x + 5, yPos + 15)
  }

  const addTable = (headers: string[], rows: string[][], startY?: number) => {
    if (startY) yPos = startY

    const colWidth = contentWidth / headers.length
    const rowHeight = 12

    checkPageBreak(rowHeight * (rows.length + 2))

    // Headers
    doc.setFillColor(...asunoBlue)
    doc.rect(margin, yPos, contentWidth, rowHeight, 'F')

    doc.setTextColor(255, 255, 255)
    doc.setFont('helvetica', 'bold')
    doc.setFontSize(10)

    headers.forEach((header, i) => {
      const x = margin + (i * colWidth) + 5
      doc.text(header, x, yPos + 8)
    })

    yPos += rowHeight

    // Rows
    rows.forEach((row, rowIndex) => {
      const isEven = rowIndex % 2 === 0

      if (isEven) {
        doc.setFillColor(248, 250, 252) // slate-50
        doc.rect(margin, yPos, contentWidth, rowHeight, 'F')
      }

      doc.setTextColor(...darkGray)
      doc.setFont('helvetica', 'normal')
      doc.setFontSize(9)

      row.forEach((cell, i) => {
        const x = margin + (i * colWidth) + 5
        const cellLines = doc.splitTextToSize(cell, colWidth - 10)
        doc.text(cellLines[0], x, yPos + 8)
      })

      yPos += rowHeight
    })
  }

  // Start building the document
  addHeader()

  // Title Section
  doc.setTextColor(...darkGray)
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(22)
  const processTitle = data.processDescription || 'ROI Analysis Report'
  doc.text(processTitle, margin, yPos)
  yPos += 15

  doc.setFont('helvetica', 'normal')
  doc.setFontSize(11)
  doc.setTextColor(...lightGray)
  doc.text(`${data.department} | ${data.industry}`, margin, yPos)
  yPos += 20

  // Executive Summary
  addSection('Executive Summary', () => {
    const executiveSummary = generateExecutiveSummary(data, results)
    doc.setFont('helvetica', 'normal')
    doc.setFontSize(10)

    executiveSummary.forEach(point => {
      checkPageBreak(20)
      const cleanPoint = point.replace(/[💡✅⚠️❌🚀📅🔍]/g, '').trim()
      const lines = doc.splitTextToSize(`• ${cleanPoint}`, contentWidth - 10)
      lines.forEach((line: string, index: number) => {
        doc.text(index === 0 ? line : `  ${line.trim()}`, margin + 5, yPos)
        yPos += 12
      })
      yPos += 3
    })
  })

  // Key Performance Indicators
  addSection('Key Performance Indicators', () => {
    const cardWidth = (contentWidth - 15) / 4

    // First row
    addKPICard(
      'Current Annual Cost',
      formatCurrency(results.baseline.annualCost, data.currency),
      darkGray,
      margin,
      cardWidth
    )

    const roi = results.scenarios.real.roi
    const roiColor = roi > 1 ? successGreen : roi > 0.5 ? warningOrange : errorRed
    addKPICard(
      'Return on Investment',
      formatPercent(roi),
      roiColor,
      margin + cardWidth + 5,
      cardWidth
    )

    const savings = results.scenarios.real.netSavingsAnnual
    const savingsColor = savings > 0 ? successGreen : errorRed
    addKPICard(
      'Annual Net Savings',
      formatCurrency(savings, data.currency),
      savingsColor,
      margin + 2 * (cardWidth + 5),
      cardWidth
    )

    const payback = results.scenarios.real.paybackMonths
    const paybackColor = payback <= 12 ? successGreen : payback <= 24 ? warningOrange : errorRed
    addKPICard(
      'Payback Period',
      formatMonths(payback),
      paybackColor,
      margin + 3 * (cardWidth + 5),
      cardWidth
    )

    yPos += 30
  })

  // Scenario Comparison Table
  addSection('Scenario Analysis', () => {
    const headers = ['Metric', 'Pessimistic', 'Realistic', 'Optimistic']
    const rows = [
      [
        'Total Annual Savings',
        formatCurrency(results.scenarios.pess.totalSavingsAnnual, data.currency),
        formatCurrency(results.scenarios.real.totalSavingsAnnual, data.currency),
        formatCurrency(results.scenarios.opt.totalSavingsAnnual, data.currency)
      ],
      [
        'Net Savings (Year 1)',
        formatCurrency(results.scenarios.pess.netSavingsAnnual, data.currency),
        formatCurrency(results.scenarios.real.netSavingsAnnual, data.currency),
        formatCurrency(results.scenarios.opt.netSavingsAnnual, data.currency)
      ],
      [
        'Return on Investment',
        formatPercent(results.scenarios.pess.roi),
        formatPercent(results.scenarios.real.roi),
        formatPercent(results.scenarios.opt.roi)
      ],
      [
        'Payback Period',
        formatMonths(results.scenarios.pess.paybackMonths),
        formatMonths(results.scenarios.real.paybackMonths),
        formatMonths(results.scenarios.opt.paybackMonths)
      ],
      [
        'FTE Resources Freed',
        formatFTE(results.scenarios.pess.fteFreed),
        formatFTE(results.scenarios.real.fteFreed),
        formatFTE(results.scenarios.opt.fteFreed)
      ]
    ]

    addTable(headers, rows)
  })

  // Recommendations
  addSection('Strategic Recommendations', () => {
    const recommendations = generateRecommendations(data, results)
    doc.setFont('helvetica', 'normal')
    doc.setFontSize(10)

    recommendations.forEach((rec, index) => {
      checkPageBreak(20)
      const cleanRec = rec.replace(/[💡✅⚠️❌🚀📅🔍]/g, '').trim()
      const lines = doc.splitTextToSize(`${index + 1}. ${cleanRec}`, contentWidth - 10)
      lines.forEach((line: string, lineIndex: number) => {
        doc.text(lineIndex === 0 ? line : `   ${line.trim()}`, margin + 5, yPos)
        yPos += 12
      })
      yPos += 5
    })
  })

  // Project Details & Assumptions
  addSection('Project Details & Key Assumptions', () => {
    const details = [
      ['Process Description', data.processDescription],
      ['Department', data.department],
      ['Industry', data.industry],
      ['Team Size', `${data.people} people`],
      ['Time Investment', `${data.hoursPerWeekPerPerson} hours per person per week`],
      ['Average Salary', `${formatCurrency(data.avgSalary, data.currency)} ${data.salaryPeriod}`],
      ['Implementation Cost', formatCurrency(data.implOneOff, data.currency)],
      ['Monthly Running Cost', formatCurrency(data.runMonthly, data.currency)],
      ['Automation Scenarios', `${data.automationPct.pess}% / ${data.automationPct.real}% / ${data.automationPct.opt}%`]
    ]

    const headers = ['Parameter', 'Value']
    addTable(headers, details)
  })

  // Add footer to last page
  addFooter()

  // Save the document
  doc.save(`asuno-roi-analysis-${format(new Date(), 'yyyy-MM-dd')}.pdf`)
}

export function exportToCSV(data: RoiCalculatorFormData, results: CalculationResults) {
  const rows = [
    ['Metric', 'Pessimistic', 'Realistic', 'Optimistic'],
    ['Time Saved (hours/week)',
     results.scenarios.pess.timeSavedHoursWeek.toFixed(1),
     results.scenarios.real.timeSavedHoursWeek.toFixed(1),
     results.scenarios.opt.timeSavedHoursWeek.toFixed(1)],
    ['Labor Savings (weekly)',
     results.scenarios.pess.laborSavingsWeek.toFixed(0),
     results.scenarios.real.laborSavingsWeek.toFixed(0),
     results.scenarios.opt.laborSavingsWeek.toFixed(0)],
    ['Quality Savings (weekly)',
     results.scenarios.pess.qualitySavingsWeek.toFixed(0),
     results.scenarios.real.qualitySavingsWeek.toFixed(0),
     results.scenarios.opt.qualitySavingsWeek.toFixed(0)],
    ['Total Savings (annual)',
     results.scenarios.pess.totalSavingsAnnual.toFixed(0),
     results.scenarios.real.totalSavingsAnnual.toFixed(0),
     results.scenarios.opt.totalSavingsAnnual.toFixed(0)],
    ['Implementation Cost (Year 1)',
     results.scenarios.pess.implAnnual.toFixed(0),
     results.scenarios.real.implAnnual.toFixed(0),
     results.scenarios.opt.implAnnual.toFixed(0)],
    ['Net Savings (Year 1)',
     results.scenarios.pess.netSavingsAnnual.toFixed(0),
     results.scenarios.real.netSavingsAnnual.toFixed(0),
     results.scenarios.opt.netSavingsAnnual.toFixed(0)],
    ['ROI (Year 1)',
     (results.scenarios.pess.roi * 100).toFixed(1) + '%',
     (results.scenarios.real.roi * 100).toFixed(1) + '%',
     (results.scenarios.opt.roi * 100).toFixed(1) + '%'],
    ['Payback Period (months)',
     results.scenarios.pess.paybackMonths.toFixed(1),
     results.scenarios.real.paybackMonths.toFixed(1),
     results.scenarios.opt.paybackMonths.toFixed(1)],
    ['FTE Freed',
     results.scenarios.pess.fteFreed.toFixed(2),
     results.scenarios.real.fteFreed.toFixed(2),
     results.scenarios.opt.fteFreed.toFixed(2)],
    ['NPV (1 year)',
     results.scenarios.pess.npv1y.toFixed(0),
     results.scenarios.real.npv1y.toFixed(0),
     results.scenarios.opt.npv1y.toFixed(0)],
    ['NPV (3 years)',
     results.scenarios.pess.npv3y.toFixed(0),
     results.scenarios.real.npv3y.toFixed(0),
     results.scenarios.opt.npv3y.toFixed(0)],
  ]

  const csvContent = rows.map(row => row.map(cell => `"${cell}"`).join(',')).join('\n')
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')

  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `roi-analysis-${format(new Date(), 'yyyy-MM-dd')}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
}

export function generateShareUrl(data: RoiCalculatorFormData): string {
  const params = new URLSearchParams()

  Object.entries(data).forEach(([key, value]) => {
    if (typeof value === 'object' && value !== null) {
      params.set(key, JSON.stringify(value))
    } else {
      params.set(key, String(value))
    }
  })

  return `${window.location.origin}${window.location.pathname}?${params.toString()}`
}

export function parseShareUrl(searchParams: URLSearchParams): Partial<RoiCalculatorFormData> | null {
  try {
    const data: any = {}

    searchParams.forEach((value, key) => {
      try {
        data[key] = JSON.parse(value)
      } catch {
        if (value === 'true' || value === 'false') {
          data[key] = value === 'true'
        } else if (!isNaN(Number(value))) {
          data[key] = Number(value)
        } else {
          data[key] = value
        }
      }
    })

    return Object.keys(data).length > 0 ? data : null
  } catch {
    return null
  }
}